To master **Bash scripting automation**, you need to cover the following foundational and advanced topics. These will help you automate repetitive tasks, manage systems, and integrate with DevOps tools like CI/CD pipelines:

---

### **1. Bash Scripting Basics**
- **What is Bash?**
  - Introduction to the Bash shell and its role in Linux/Unix systems.
  - Why Bash is critical for DevOps (automation, scripting, CLI tools).
- **Script Structure**
  - Shebang (`#!/bin/bash`), comments, and script execution (`chmod +x`, `./script.sh`).
- **Variables**
  - Declaring variables, environment variables, and command substitution.
  - Example: `name="Alice"; echo "Hello $name"`.
- **Input/Output**
  - Reading user input (`read`), output redirection (`>`, `>>`, `2>`), and pipes (`|`).
  - Example: `echo "Hello" > file.txt`.
- **Quoting**
  - Differences between `" "`, `' '`, and backticks (\` \`).

---

### **2. Control Structures**
- **Conditionals**
  - `if-else` statements, comparison operators (`-eq`, `-ne`, `-z`), and file checks (`-f`, `-d`).
  - Example:
    ```bash
    if [ -f "/path/to/file" ]; then
      echo "File exists!"
    fi
    ```
- **Loops**
  - `for`, `while`, and `until` loops.
  - Example (loop through files):
    ```bash
    for file in *.log; do
      echo "Processing $file"
    done
    ```
- **Case Statements**
  - Pattern matching with `case` (e.g., handling command-line flags).

---

### **3. Functions**
- **Defining Functions**
  - Reusable code blocks: `function_name() { ... }`.
- **Parameters & Return Values**
  - Passing arguments (`$1`, `$2`, `$@`), returning exit codes (`return`).
  - Example:
    ```bash
    greet() {
      echo "Hello, $1!"
    }
    greet "Alice"
    ```

---

### **4. Error Handling**
- **Exit Codes**
  - Check if a command succeeded (`$?`).
  - Example: `if [ $? -ne 0 ]; then echo "Error!"; exit 1; fi`.
- **Traps**
  - Use `trap` to handle signals (e.g., cleanup on script termination).
  - Example: `trap 'rm -f /tmp/tempfile' EXIT`.
- **Debugging**
  - Run scripts in debug mode: `bash -x script.sh`.

---

### **5. Automation Use Cases**
- **File & Directory Operations**
  - Automate backups, log rotation, or file cleanup:
    ```bash
    # Delete files older than 7 days
    find /var/log -name "*.log" -type f -mtime +7 -delete
    ```
- **System Monitoring**
  - Check disk usage, CPU/memory stats, and send alerts:
    ```bash
    if [ $(df -h / | awk 'NR==2 {print $5}' | tr -d '%') -gt 90 ]; then
      echo "Disk space critical!" | mail -s "Alert" admin@example.com
    fi
    ```
- **Package Management**
  - Automate updates/installations (e.g., `apt-get`, `yum`).
- **User Management**
  - Bulk user creation/deletion from a CSV file.
- **Network Operations**
  - Ping checks, curl API endpoints, or validate SSL certificates.

---

### **6. Integrating with DevOps Tools**
- **CI/CD Pipelines**
  - Use Bash scripts in Jenkins/GitLab CI stages (e.g., running tests, deploying artifacts).
  - Example (Jenkins pipeline step):
    ```bash
    #!/bin/bash
    echo "Building app..."
    mvn clean package
    ```
- **Docker & Kubernetes**
  - Write scripts to build images, clean up containers, or manage pods.
  - Example (prune unused Docker resources):
    ```bash
    docker system prune -af
    ```
- **Cloud Automation**
  - Script AWS CLI operations (e.g., start/stop EC2 instances):
    ```bash
    aws ec2 start-instances --instance-ids i-1234567890abcdef0
    ```

---

### **7. Advanced Topics**
- **Command-Line Tools**
  - Combine `grep`, `sed`, `awk`, `jq` (for JSON) in scripts.
  - Example (extract Kubernetes pod names):
    ```bash
    kubectl get pods | awk '{print $1}'
    ```
- **Parallel Execution**
  - Speed up tasks with `xargs` or background processes (`&`, `wait`).
- **Script Portability**
  - Use `#!/usr/bin/env bash` for cross-platform compatibility.
- **Security**
  - Avoid hardcoding secrets; use environment variables or vaults.
  - Sanitize inputs to prevent shell injection attacks.

---

### **8. Best Practices**
- **Modularity**
  - Break scripts into functions/files for reusability.
- **Logging**
  - Log outputs to files with timestamps: `echo "$(date): Task started" >> log.txt`.
- **Testing**
  - Validate scripts with tools like ShellCheck (linter).
- **Version Control**
  - Store scripts in Git and document their purpose in READMEs.

---

### **9. Example Project: Automate Server Cleanup**
1. Write a script to:
   - Delete old logs.
   - Archive important files.
   - Send a summary email.
   ```bash
   #!/bin/bash
   LOG_DIR="/var/log"
   BACKUP_DIR="/backups"
   # Delete logs older than 30 days
   find "$LOG_DIR" -name "*.log" -mtime +30 -delete
   # Archive remaining logs
   tar -czvf "$BACKUP_DIR/logs_$(date +%F).tar.gz" "$LOG_DIR"
   # Send email
   echo "Cleanup completed on $(date)" | mail -s "Server Cleanup Report" admin@example.com
   ```

---

### **10. Learning Resources**
- **Free Tutorials**:
  - [Bash Scripting Tutorial](https://linuxconfig.org/bash-scripting-tutorial-for-beginners)
  - [Google Shell Style Guide](https://google.github.io/styleguide/shellguide.html)
- **Books**:
  - *The Linux Command Line* by William Shotts.
  - *Bash Cookbook* by Carl Albing.
- **Tools**:
  - ShellCheck (linter): https://www.shellcheck.net/
  - [ExplainShell](https://explainshell.com/) (decode complex commands).

---

Start with small scripts (e.g., backups, log parsing) and gradually tackle complex tasks. Practice daily, and integrate Bash into your DevOps workflows! üêß
